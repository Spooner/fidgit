h1. Fidgit

Fidgit is a GUI framework built on "Gosu":http://libgosu.org/ and "Chingu":http://ippa.se/chingu


h2. Description

The API is inspired by "Shoes":http://shoesrb.com/, but since Shoes is very simplistic, the functionality is based around "FXRuby":http://www.fxruby.org/.
Fidgit was originally developed as a part of the Sidney game, but as it got more complex, it was obvious it would be useful to separate.

_WARNING: THIS PROJECT IS IN EARLY ALPHA DEVELOPMENT AND THE API IS LIABLE TO CONTINUOUS CHANGE AND IT IS QUITE UNSTABLE!_

Read the Yard documentation at "rubydoc.info":http://rubydoc.info/github/Spooner/fidgit/master

h2. License

GPL v3 (see COPYING.txt)

h2. Requirements

* Gosu and Chingu gems ("gem install gosu chingu").
* Ruby 1.9.2 (sorry, I'm lazy!).


h2. Example

<pre>require 'fidgit'

class MyGame < Chingu::Window
  def initialize
    super(640, 480, false)
  end

  def setup
    push_game_state MyGuiState # To use Fidgit, a Fidgit::GuiState must be active.
  end
end

class MyGuiState < Fidgit::GuiState
  def initialize
    super

    pack :vertical do # Create a vertically packed section.
      my_label = label "Hello world!", background_color: Gosu::Color.rgb(0, 100, 0)

      button text: "Goodbye" do
        my_label.text = "Goodbye cruel world!"
      end
    end
  end
end

MyGame.new.show
</pre>


h2. API

As well as a cursor and tool-tips that are managed by the GuiState for you, there are several elements you can use inside your GuiState.

Elements are best added by using simple methods (listed below). Most of these method accept a block, some offering access to public methods of the element and others being default event handlers.

The GuiState itself only accepts #pack, but any packer or group accepts any other element method.

h3. Arrangement managers

Fidgit uses automatic packers to manage layout.

* _pack([:vertical|:horizontal|:grid], ...)_ - Packer that packs its component elements (Block has access to public methods).
* _group(...)_ - Manages any groupable elements put inside it, such as radio-buttons (Block has access to public methods). Best to subscribe to :changed event handler.

h3. Elements

* _button(...)_ - Button with text and/or icon (Block handles :clicked_left_mouse_button event).
* _color_picker(...)_ - Red, green and blue sliders and colour indicator (Block handles :changed event).
* _label(text, ...)_ - Label with text and, optionally, an icon (No block accepted).
* _slider(...)_ - Horizontal slider with handle (Block handles :changed event handler).
* _text_area(...)_ - An multi-line element, containing editable text (Block handles :changed event).
* _toggle_button(...)_ - Button that can be toggled on/off (Block handles :clicked_left_mouse_button event).

h4. Groupable elements

These should be placed within a group (directly or indirectly) and only one of them will be selected. The group manages which one is selected.

* _color_well(color, ...)_ - A radio-button used to pick a colour (Block handles :clicked_left_mouse_button event).
* _radio_button(value, ...)_ - Button that is part of a group (Block handles :clicked_left_mouse_button event).

h3. Compound elements

These elements contain items, which can easily be added from within a block passed to them. One can subscribe to the :changed event, which is usually easier than managing each item separately.

* _combo_box(...)_ - Button that has a drop-down menu attached (Block has access to public methods).
** _item(value, ...)_ - Add an item to a combo box (Block handles :clicked_left_mouse_button event).
* _list(...)_ - A vertical list of items to select from (Block has access to public methods).
** _item(value, ...)_ - Add an item to a combo box (Block handles :clicked_left_mouse_button event).


h2. Alternative GUI frameworks

There are two GUI other tool-kits that work with Gosu:

* "Rubygoo":http://code.google.com/p/rubygoo/
** Additionally supports "Rubygame":http://rubygame.org/ (as well as Gosu).
** Relatively cumbersome API.
** Only simple widgets are implemented.

* "GGLib":http://code.google.com/p/gglib/ (Gosu GUI Library)
** Pretty graphical themes.
** Only simple widgets are implemented.

Remember that if you primarily want a GUI for your GUI application, not just a GUI in your Gosu game, consider using a dedicated GUI tool-kit, such as "Shoes":http://shoesrb.com/, "FXRuby":http://www.fxruby.org/ or "wxRuby":http://wxruby.rubyforge.org/
